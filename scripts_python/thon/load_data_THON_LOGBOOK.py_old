import psycopg2
import numpy as np
import csv
import peche_sql

## Connect to an existing database
conn = psycopg2.connect("dbname=geospatialdb user=postgres")
#
## Open a cursor to perform database operations
cur = conn.cursor()

file_obs = '/Users/jeanmensa/Google_Drive/Gabon_Bleu/_database/CSV_data/fishery/fishery_SPECIES_CONV.csv_out'

# read CSV data to be uploaded

tailles = ['0.9','1.8','2.4','3','3.2','3.4','4.2','7.5','10','15','25','30','35','45','55','65','75','85','nan','0.9','1.8','2.4','3','3.2','3.4','4.2','7.5','10','15','25','35','45','55','65','75','85','105','nan','0.75','1.5','1.7','1.8','2.4','3.2','3.4','7.2','nan','15','25','35','45','nan','0.75','1.5','1.7','1.8','nan','0.9','1.8','nan','0.9','1.8','2.4','nan','0.9','1.8','nan','0.9','nan','0.9','nan','1.7','1.7','nan','1.8','0.9','55','nan','nan','nan','nan','80','nan','25','200','nan','nan','nan','nan','nan','0.9','0.9','nan','0.9','1.7','nan','0.9','1.7','nan','0.9','1.7','nan','0.9','1.7','205','nan','nan','nan','65','205','nan','nan','nan','nan','nan','nan','nan','nan','1.7','3.4','nan','nan']

species = ['SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.alb' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Thu.obe' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Thu.ala' ,'SCOM/Thu.ala' ,'SCOM/Thu.ala' ,'SCOM/Thu.ala' ,'SCOM/Thu.ala' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Aux.roc' ,'SCOM/Aux.roc' ,'SCOM/Aux.roc' ,'SCOM/Aux.roc' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'BAL/Bal.vet' ,'BAL/Bal.vet' ,'CAR/Ela.bip' ,'CAR/Ela.bip' ,'SCOM/Sar.sar' ,'nan' ,'nan' ,'nan' ,'SCOM/Aux.tha' ,'XIP/Xip.gla' ,'SPA/Spa.aur' ,'COR' ,'nan' ,'IST/Ist.alb' ,'MYL/Myl' ,'SQL/Squ' ,'SCOM/Thu.ala' ,'COR' ,'IST/Ist.alb' ,'nan' ,'nan' ,'nan' ,'POI' ,'SCOM/Thu.alb' ,'SCOM/Kat.pel' ,'SCOM/Kat.pel' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Aux.tha' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Eut.all' ,'SCOM/Aux' ,'SCOM/Aux' ,'IST/Ist.alb' ,'IST/Ist.alb' ,'BAL/Bal.vet' ,'CAR/Ela.bip' ,'SQL/Squ' ,'IST/Ist.alb' ,'CAR/Car.cry' ,'BAL/Can.mac' ,'nan' ,'SQL/Squ' ,'MYL/Myl' ,'nan' ,'BAL' ,'SPA/Spa.aur' ,'COR' ,'COR' ,'POI ' ,'REQ/Rhi.typ']

rejects

path = '/Users/jeanmensa/Google_Drive/Gabon_Bleu/_database/CSV_data/thon/'
filename = 'thon_LOGBOOK.csv_out'

with open(path+filename, 'rU') as csvfile:
 spamreader = csv.reader(csvfile, delimiter=',', quotechar='"')
 spamreader.next()

 for lines in spamreader:
  for i in range(len(lines)):
   if lines[i] is not None:
    lines[i] = lines[i].replace('\xc2\xa0','')
   if lines[i] == '': lines[i]=None
   if lines[i] == '\n': lines[i]=None
   if lines[i] == '-9999': lines[i]=None
   if lines[i] == 'NA': lines[i]=None
   if lines[i] == 'NaN': lines[i]=None
   if lines[i] == '#REF!': lines[i]=None
   if lines[i] == 'No data': lines[i]=None
   if lines[i] == 'NO DATA': lines[i]=None

  navire = lines[1]
  country = lines[0]
  port_d = None
  port_a = None
  date_d = None
  date_a = None
  date_c = lines[3]
  heure_c = lines[4]
  ndays = None
  lance = None
  eez = lines[2]
  water_temp = lines[11] 
  wind_speed = lines[140]
  wind_dir = lines[139]
  cur_speed = lines[145]

  if lines[12] == 'X':
   success = True
  elif lines[13] == 'X':
   success = False
  else:
   success = None

  if lines[141] == 'X':
   banclibre = True
  else:
   banclibre = False

  balise_id = lines[136]

  comment = ''

  if lines[137] is not None:
   comment = lines[137]
  if lines[138] is not None:
   comment = comment + ' ' + lines[138]

  if lines[5] != None:
   deg = float(lines[5])
   if lines[6] is not None:
    min = float(lines[6])
   else:
    min = 0
   lat = deg+min/60.
   if lines[7] == 'S': lat = -1*lat
  else:
   deg = np.nan 
   min = np.nan
   lat = np.nan
 
  if lines[8] != None:
   deg = float(lines[8])
   if lines[6] is not None:
    min = float(lines[9])
   else:
    min = 0
   lon = deg+min/60.
   if lines[8] == 'O': lon = -1*lon
  else:
   deg = np.nan
   min = np.nan 
   lon = np.nan

   ## Execute a command: this creates a new table

  for f in range(122):
   poids = lines[f+14]
   if poids is not None and species[f] != 'nan' and tailles[f] != 'nan':
    taille = tailles[f]
    rejete = rejects[f]

    t_species = species[f].lower()
    obs_species = peche_sql.convert_OBS(t_species, file_obs)
    id_species = peche_sql.findUUID_species(obs_species,conn)

    if len(id_species) > 0:
     id_species = str(id_species[0][0]) 
 
 #   username, navire, country, port_d, port_a, date_d, date_a, date_c, heure_c, ndays, lance, eez, water_temp, wind_speed, wind_dir, cur_speed, success, banclibre, balise_id, rejete, id_species, taille, poids, comment 
 
 
     if str(lat) != 'nan' and str(lon) != 'nan':
      query = "INSERT INTO thon.logbook (username, navire, country, port_d, port_a, date_d, date_a, date_c, heure_c, ndays, lance, eez, water_temp, wind_speed, wind_dir, cur_speed, success, banclibre, balise_id, rejete, id_species, taille, poids, comment, location) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,ST_GeomFromText('POINT(%s %s)',4326));"
   
#      print query
      cur.execute(query,('jmensa',navire, country, port_d, port_a, date_d, date_a, date_c, heure_c, ndays, lance, eez, water_temp, wind_speed, wind_dir, cur_speed, success, banclibre, balise_id, rejete, id_species, taille, poids, comment, lon, lat))
      conn.commit()

    else:
     print species[f]
  
cur.close()
conn.close()
